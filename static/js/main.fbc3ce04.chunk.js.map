{"version":3,"sources":["maoi.jpeg","did.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","isOrg","orgName","firstName","lastName","a","console","log","getKeypair","keypair","privateKey","priv","pubX","pubY","subjectType","subjectName","getDID","did","JSON","stringify","getVP","vp","fetch","headers","then","res","json","method","body","key","fetchHostedDID","response","data","catch","error","fetchHostedVP","vpUrl","didUrl","App","useSound","sound","play","useState","setUrl","setIsOrg","setOrgName","setFirstName","setLastName","setVpUrl","setDidUrl","loaded","setLoaded","validateSuccessful","setValidateSuccessful","className","src","maoi","onClick","alt","style","textAlign","width","margin","onSubmit","e","preventDefault","submit","type","value","onChange","target","id","document","getElementById","validateDidVp","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fbc3ce04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/maoi.52dbaa8d.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/did.b4492867.mp3\";","import maoi from './maoi.jpeg';\nimport sound from './did.mp3';\nimport './App.css';\nimport React, { useState } from 'react';\nimport useSound from 'use-sound';\nimport { id } from 'ethers/lib/utils';\n\nconst KEY_JSON_PATH = \"testData.json\";\n\n\n\n// inputs: url, subject type, subject name\n// subject type: person, organization, etc\n// subject name: if person then first/last, if org then org name\n\nconst didMethod = \"did:web:\"\n//DUE TO: replace with user input\nconst didUrl = \"srujn.github.io:did-root\"\nconst didController = didMethod + didUrl\n\n\n\nconst vmCount = 1\n\nconst vmTemplate = {\n  \"id\": didController, //add key identifier\n  \"type\": \"JsonWebKey2020\",\n  \"controller\": didController,\n  \"publicKeyJwk\": {\n    \"kty\": \"EC\",\n    \"crv\": \"secp256k1\",\n    \"x\": \"replace-this\",\n    \"y\": \"replace-this\"\n  }\n}\n\nconst didTemplate = {\n  \"@context\": [\n    \"https://www.w3.org/ns/did/v1\",\n    \"https://w3id.org/security/suites/jws-2020/v1\"\n  ],\n  \"id\": didController,\n  \"verificationMethod\": [\n\n  ],\n  \"assertionMethod\": [\n  ]\n}\n\n// const [users, setUsers] = useState([]);\n\n// useEffect(() => {\n//   fetch(\"/api/users\")\n//     .then(res => res.json())\n//     .then(json => setUsers(json.users));\n//   // Specify how to clean up after this effect:\n//   return () => {};\n// }, []); // empty 2nd arg - only runs once\n\nasync function submit(url, isOrg, orgName, firstName, lastName) {\n  // print url, isOrg, orgName, firstName, lastName\n  console.log(\"URL: \" + url + \"\\n\" + \"isOrg: \"\n    + isOrg + \"\\n\" + \"orgName: \" + orgName + \"\\n\"\n    + \"firstName: \" + firstName + \"\\n\" + \"lastName: \"\n    + lastName + \"\\n\");\n  \n  // generate keypair\n  const keypair = await getKeypair();\n  console.log(keypair);\n  const privateKey = keypair[1].priv;\n  const pubX = keypair[2];\n  const pubY = keypair[3];\n\n\n  // generate DID\n  const subjectType = isOrg ? \"organization\" : \"person\";\n  const subjectName = isOrg ? orgName : firstName + \" \" + lastName;\n  const did = await getDID(url, subjectType, subjectName, pubX, pubY);\n  console.log(JSON.stringify(did, null, 2));\n  \n  // generate VC\n  //const vc = await getVC(privateKey, did, \"web_service_binding\");\n  //console.log(JSON.stringify(vc, null, 2));\n\n  // generate VP\n  const vp = await getVP(privateKey, did);\n  console.log(JSON.stringify(vp, null, 2));\n\n}\n\nasync function getKeypair() {\n  return fetch(\"/api/keypair\", {\n    headers : { \n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n     }\n  })\n    .then(res => res.json())\n    .then(json => {\n      return json.keypair;\n    });\n}\n\nasync function getDID(url, subjectType, subjectName, pubX, pubY) {\n  return fetch(\"/api/did\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      url: url,\n      subjectType: subjectType,\n      subjectName: subjectName,\n      pubX: pubX,\n      pubY: pubY\n    })\n  })\n    .then(res => res.json())\n    .then(json => {\n      return json.did;\n    });\n}\n\nasync function getVC(key, did, type) {\n  return fetch(\"/api/vc\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      key: key,\n      did: did,\n      type: type\n    })\n  })\n    .then(res => res.json())\n    .then(json => {\n      return json.vc;\n    });\n}\n\nasync function getVP(key, did) {\n  return fetch(\"/api/vp\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      key: key,\n      did: did\n    })\n  })\n    .then(res => res.json())\n    .then(json => {\n      return json.vp;\n    });\n}\n\n// Functions for validating the did document and vp pair\n//========================================================\n// 1. Fetch the did document from a hosted location\nasync function fetchHostedDID(url) {\n  return fetch(url)\n  .then(response => response.json())\n  .then(data => {\n    console.log(JSON.stringify(data, null, 2)); // Prints the did doc to the console\n    return data;\n  })\n  .catch(error => console.error('An error occurred while fetching the did document from '+url+\": \", error));\n}\n\n// 2. Fetch the vp from a hosted location\nasync function fetchHostedVP(url) {\n  return fetch(url)\n  .then(response => response.json())\n  .then(data => {\n    console.log(JSON.stringify(data, null, 2)); // Prints the vp to the console\n    return data;\n  })\n  .catch(error => console.error('An error occurred while fetching the vp from '+url+\": \", error));\n}\n\n// 3. Validate the did document and vp pair\nasync function validateDidVp(vpUrl, didUrl) {\n  let vp = await fetchHostedVP(vpUrl);\n  let did = await fetchHostedDID(didUrl);\n  \n  if(vp[\"verifiableCredentials\"][0][\"credentialSubject\"][\"id\"] = did[\"id\"]) {\n    return true\n  }\n  else return false\n}\n//========================================================\n\n\n// App component\nfunction App() {\n  const [play] = useSound(sound);\n\n  const [url, setUrl] = useState(\"joe.com\");\n\n  const [isOrg, setIsOrg] = useState(false);\n  const [orgName, setOrgName] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"joe\");\n  const [lastName, setLastName] = useState(\"brandon\");\n\n  const [vpUrl, setVpUrl] = useState(\"https://aus36.github.io/didweb-doc/vp.json\"); // Url for hosted vp\n  const [didUrl, setDidUrl] = useState(\"https://aus36.github.io/didweb-doc/did.json\"); // Url for hosted did document\n\n  const [loaded, setLoaded] = useState(false); // flag for when the validate pair function has been called\n\n  const [validateSuccessful, setValidateSuccessful] = useState(false); // flag for the result when the validate pair function has been called\n\n  const setType = () => {\n    if (document.getElementById('type').value === 'organization') {\n      setIsOrg(true);\n    } else {\n      setIsOrg(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {<img src={maoi} onClick={play} className=\"App-logo\" alt=\"logo\" />}\n        <form style={{ textAlign: 'left', width: '50%', margin: 'auto' }}\n          onSubmit={e => {\n            e.preventDefault();\n            submit(url, isOrg, orgName, firstName, lastName);\n          }}>\n          <label>\n            URL:\n            <input type=\"text\" value={url} onChange={e => setUrl(e.target.value)} />\n          </label>\n          <br />\n          <label>\n            Subject Type:\n            <select id='type' onChange={setType}>\n              <option value=\"person\">Person</option>\n              <option value=\"organization\">Organization</option>\n            </select>\n          </label>\n          <br />\n          {isOrg ?\n            <label>\n              Organization Name:\n              <input type=\"text\" onChange={e => setOrgName(e.target.value)} />\n            </label> :\n            <label>\n              First Name:\n              <input id=\"firstName\" value={firstName} type=\"text\" onChange={e => setFirstName(e.target.value)} />\n              <br />\n              Last Name:\n              <input id=\"lastName\" value={lastName} type=\"text\" onChange={e => setLastName(e.target.value)} />\n            </label>\n          }\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <br />\n        <form>\n          <label>\n            DID Document URL:\n            <input id=\"didDocUrl\" value={didUrl} type=\"text\" onChange={e => setDidUrl(e.target.value)} />\n            <br />\n            Verifiable Presentation URL:\n            <input id=\"vpUrl\" value={vpUrl} type=\"text\" onChange={e => setVpUrl(e.target.value)} />\n          </label>\n        </form>\n        <br />\n        <button onClick={ () => {setValidateSuccessful(validateDidVp(vpUrl, didUrl)); setLoaded(true);}}>Validate did document and vp pair</button>\n        <br />\n        {loaded\n        ? <p>Validation result: {validateSuccessful ? \"Pair Sucessfully Validated\" : \"Invalid DID Doc/VP Pair\"}</p> \n        : <p>Nothing to validate yet</p>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}